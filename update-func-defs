#!/bin/bash -e
#
#  Update functional test definitions
#
#  This script is likely only relevant for the tasks necessary at a
#  point in time.  Committed to repo for reference anyway, to be
#  improved upon or adjusted for later needs.

charms="$(cat charms.txt)"
src_charms="$(cat source-charms.txt)"
basedir="$(pwd)"
branch="$1"

gerrit_topic="update-func-defs"
commit_msg_file="$basedir/commit-message-func-defs.txt"

all_params="$@"
if [[ "$all_params" == *--amend* ]]; then
  AMEND="True"
fi
if [[ "$all_params" == *--no-review* ]]; then
  NO_REVIEW="True"
fi
if [[ "$all_params" == *--force-review* ]]; then
  FORCE_REVIEW="True"
fi
if [[ "$all_params" == *--rebase-master* ]]; then
  REBASE_MASTER="True"
fi
if [[ "$all_params" == *--ch-sync-legacy* ]]; then
  CH_SYNC="True"
fi

usage="usage: update-func-defs <master||stable/nn.nn>

USAGE EXAMPLES

Clone repos, check out the master branch, make changes and
submit gerrit reviews:
  ./update-func-defs master

Clone repos, check out the master branch, performa a legacy
charm-helper sync, make changes and submit gerrit reviews:
  ./update-func-defs master --ch-sync-legacy

Clone repos, check out the master branch, make changes
but do not actually submit a gerrit review:
  ./update-func-defs master --no-review

Re-use local checkout, amend commits and add patchset to
the existing gerrit review:
  ./update-func-defs master --amend

Re-use local checkout, rebase with master, amend commits
and add patchset to the existing gerrit review:
  ./update-func-defs master --amend --rebase-master

Re-use local checkout, rebase with master, amend commits
and add patchset to the existing gerrit review even if
no changes detected in the repo.  Useful if manually
committing changes in the local repo outside this script.
  ./update-func-defs master --amend --rebase-master --force-review

Re-use local checkout, amend commits for adding to the review,
but do not actually submit a gerrit review:
  ./update-func-defs master --amend --no-review
"

if [ -z "$branch" ]; then
    echo -e "$usage"
    exit 1
fi

# Expect user to have git config ready for gerrit use
git config --get gitreview.username || ( echo " ! Not set: gitreview.username git config option"; echo -e "$usage"; exit 1 )

commit_msg="$(cat $commit_msg_file ||:)"
if [ -z "$commit_msg" ]; then
    echo " ! $commit_msg_file not found or empty."
    exit 1
fi


function git_get(){
  (
  if [[ "${AMEND^^}" != "TRUE" ]] && [[ ! -d $2 ]]; then
    echo " + Clone $1 -> $2"
    git clone $1 $2
    cd $2
    git checkout $3
  elif [[ "${AMEND^^}" != "TRUE" ]] && [[ -d $2 ]]; then
    echo " ! Dir exists: $2.  Consider running 'make clean' or using --amend."
    exit 1
  else
    echo " . Re-using checkout dir $2"
    cd $2
    git branch -v
  fi
  )
}


function git_review(){
  if [ "${NO_REVIEW^^}" == "TRUE" ]; then
    echo " . Not proposing gerrit (dry run)."
  elif [ "${FORCE_REVIEW^^}" != "TRUE" ]; then
    echo " . Submitting gerrit review for $charm"
    git review
  elif [ "${FORCE_REVIEW^^}" == "TRUE" ]; then
    echo " . Submitting gerrit review for $charm (non-fatal on failure)"
    git review ||:
  else
    echo " ! Unknown condition in git_review"
    exit 1
  fi
}


function update_amulet_tests(){
    # Update legacy amulet/bundletester style test definitions

    # Use the LTS file as a template to add the current interim release combo test
    lts_distro_src_file="$tests_dir/gate-basic-bionic-queens"
    int_distro_dst_file="$tests_dir/dev-basic-cosmic-rocky"

    git rm "$tests_dir/dev-*" ||:

    if [[ ! -f $int_distro_dst_file ]] && [[ -f $lts_distro_src_file ]]; then
      # Add tests
      cp -fv $lts_distro_src_file $int_distro_dst_file
      sed -e "s_queens_rocky_g"  -i $int_distro_dst_file
      sed -e "s_Queens_Rocky_g"  -i $int_distro_dst_file
      sed -e "s_bionic_cosmic_g" -i $int_distro_dst_file
      sed -e "s_Bionic_Cosmic_g" -i $int_distro_dst_file
      chmod +x $int_distro_dst_file

      # Update smoke test target
      echo "Update smoke test target"
      sed -i -e "s/bundletester -vl DEBUG -r json -o func-results.json gate-basic-xenial.* --no-destroy/bundletester -vl DEBUG -r json -o func-results.json gate-basic-bionic-queens --no-destroy/g" $test_tox_file
    fi

    # Use a LTS + UCA file as a template to add the current LTS + UCA release combo test
    lts_uca_src_file="$tests_dir/gate-basic-xenial-queens"
    lts_uca_dst_file="$tests_dir/dev-basic-bionic-rocky"

    if [[ ! -f $lts_uca_dst_file ]] && [[ -f $lts_uca_src_file ]]; then
      # Add tests
      cp -fv $lts_uca_src_file $lts_uca_dst_file
      sed -e "s_queens_rocky_g"  -i $lts_uca_dst_file
      sed -e "s_Queens_Rocky_g"  -i $lts_uca_dst_file
      sed -e "s_xenial_bionic_g" -i $lts_uca_dst_file
      sed -e "s_Xenial_Bionic_g" -i $lts_uca_dst_file
      chmod +x $lts_uca_dst_file
    fi

}


function fix_hashbangs(){
    # Fix hashbangs for virtualenv if necessary
    find ${tests_dir} -maxdepth 1 -type f | xargs sed -e "s_#\!/usr/bin/python\$_#\!/usr/bin/env python_g" -i
    find ${tests_dir} -maxdepth 1 -type f | xargs sed -e "s_#\!/usr/bin/python3\$_#\!/usr/bin/env python3_g" -i
}


for charm in $charms; do
  echo "===== $charm ====="
  (
    git_get https://github.com/openstack/charm-$charm $charm $branch
    cd $charm

    # Set file locations depending on charm type
    charm_dir="$basedir/$charm"
    if grep "^$charm$" ../zaza-charms.txt; then
      # zaza charms (assumes they are also src charms)
      echo " . zaza charm"
      tests_dir="$basedir/$charm/src/tests"
      test_tox_file="$basedir/$charm/src/tox.ini"
      # TODO: zaza needs test def updates too
      fix_hashbangs
    elif grep "^$charm$" ../source-charms.txt; then
      # src charms
      echo " . source charm"
      tests_dir="$basedir/$charm/src/tests"
      test_tox_file="$basedir/$charm/src/tox.ini"
      update_amulet_tests
      fix_hashbangs
    else
      # classic charms
      echo " . classic charm"
      tests_dir="$basedir/$charm/tests"
      test_tox_file="$basedir/$charm/tox.ini"
      update_amulet_tests
      fix_hashbangs
    fi

    # Optionally rebase with master
    if [[ "${REBASE_MASTER^^}" == "TRUE" ]]; then
      (
        git checkout master
        git pull
        git checkout $gerrit_topic || git checkout -b $gerrit_topic
        git rebase master
      )
    fi

    # Optionally do legacy-style charm-helper sync
    if [[ "${CH_SYNC^^}" == "TRUE" ]] && [[ -f 'Makefile' ]]; then
      echo " + Doing legacy-style charm-helper sync on $charm"
      make sync
    else
      echo " . No legacy-style charm-helper sync available for $charm"
    fi

    # Commit if there are changes, or optionally commit even if no changes
    git_status="$(git status -s)"
    if [[ "${FORCE_REVIEW^^}" == "TRUE" ]]; then
      git_status="True"
    fi
    if [[ "${AMEND^^}" != "TRUE" ]] && [[ -n "$git_status" ]]; then
      git checkout -b $gerrit_topic
      git add .
      git commit -F $commit_msg_file
      git_review
    elif [[ "${AMEND^^}" == "TRUE" ]] && [[ -n "$git_status" ]]; then
      git checkout $gerrit_topic || git checkout -b $gerrit_topic
      git add .
      git commit --amend --no-edit
      git_review
    else
      echo " - No changes for $charm, skipping git review."
    fi
  )
done
